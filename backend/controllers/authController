const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const registerUser = async (req, res) => {
  try {
    const { fullName, email, username, password } = req.body;
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      res.status(400).json({ msg: 'User already exists' });
      return;
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({
      fullName,
      username,
      email,
      password: hashedPassword,
      userID: username,
    });

    await user.save();
    res
      .status(201)
      .json({ msg: 'User registered successfully', userID: username });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ msg: 'Internal server error' });
  }
};

const loginUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findByUsername(username);
    if (!user) {
      return res.status(404).json({ message: 'user not found' });
    }
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'invalid password' });
    }
    const token = jwt.sign({ userId: user._id }, 'secretKey');
    return res.status(200).json({ token, userID: username });
  } catch (error) {
    console.error('error logging in:', error);
    return res.status(500).json({ msg: 'internal server error' });
  }
};

module.exports = { registerUser, loginUser };
